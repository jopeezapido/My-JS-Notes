
Challenge 1: Changing Declarations to Expressions

Developers for the Forest of Function Expressions Theme Park have created a function declaration named forestFright, but they’ve decided not to keep the function in memory.

Convert the function from a named function declaration to an anonymous function expression and assign it to a variable called runAway.


Challenge 2: Using Function Expressions with Parameters

The devs at the Death-Defying Dogwoods have determined a specific formula for the quantifiable amount of fear generated at the theme park. Their formula is based on the amount of people, the amount of rain, and the amount of sharks. Yes. Sharks.

	1) Analyze the fearGenerated formula.
	2) Assign appropriate values to the people, rain, and sharks variables so that the amount of fear generated will be no less than 100, but no more than 400.
	3) Call the fearGenerated function and pass in the variables as arguments.
	4) Store the result of that function in a new variable called fear.

	Note: You do not need to change the existing fearGenerated function.

	Check your variable values and function call. Assign the return value to the fear variable at the end.

Challenge 3: Displaying Function Contents

Periodically, the devs at the Haunted Hickory House need to be reminded of their formula. They would like to view the contents of the function, rather than executing it.

Write one line of code to alert the contents of the variable that stores the function to the screen. Here is the fearGenerated function expression assignment for reference:

	var fearGenerated = function(numPeeps, rainInInches, numSharks) {
  	var rainFear = numPeeps * rainInInches;
  	var sharkFear = numSharks * numSharks * numSharks;
  	var totalFear = sharkFear + rainFear;
  	return totalFear;
	};

Challege 4: Functions as Parameters, Arguments and Return Values

Well, it stands to reason that some people might not want to experience the Haunted Hickory House if the fear is significantly elevated on that day.

Inside the fearMessage function expression, use conditional statements (e.g., if, else if) to check the integer value of the fear variable, assigned on line 1, and decide whether its value is LOW or MEDIUM.

For each fear range below we want to display a confirmation message with the corresponding message. We can return a call to the confirm function that has a single string argument containing the correct message.

For fear levels less than 200 (i.e., fear < 200):

	Fear Level: LOW
	Still wanna ride?

For fear levels from 200 through 300 inclusive (i.e., fear >= 200 && fear <= 300):

	Fear Level: MEDIUM
	Think you'll make it?

Note: You do not need to change the existing code that’s provided for you in the challenge editor.